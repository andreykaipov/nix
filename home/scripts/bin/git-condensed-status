#!/bin/sh
#
# Git prompt support for POSIX shells.
#
# Requirements: git and awk
#
# Reports a condensed version of `git status` for use in a command-line prompt.
#
# For example, the following output:
#
# master...origin/master [ahead 420, behind 69] 1x 1+ 1* 1?
#
# Might correspond to the following **very contrived** (but possible) state in
# a repo, where we have one unmerged changed, one staged change, one unstaged
# change, and one untracked file.
#
# ```
# ~/documents master...origin/master [ahead 420, behind 69] 1x 1+ 1* 1?
# ‚ùØ git status
# On branch master
# Your branch and 'origin/master' have diverged,
# and have 420 and 69 different commits each, respectively.
#   (use "git pull" to merge the remote branch into yours)
#
# You have unmerged paths.
#   (fix conflicts and run "git commit")
#   (use "git merge --abort" to abort the merge)
#
# Changes to be committed:
#
#         new file:   longcat.png
#
# Unmerged paths:
#   (use "git add <file>..." to mark resolution)
#
#         both modified:   the-urban-moms-guide-for-synthesizing-dmt.txt
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#         modified:   longcat.png
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#         can-you-smell-what-the-rock-is-cooking.mp4
# ```
#
# See https://git-scm.com/docs/git-status#_short_format for the specification of
# the porcelain output.

main() {
    branch_color="${1:-\033[1;36m}"

    if output="$(git status --porcelain -b 2> /dev/null)"; then
        echo "$output" | awk -v FS= -v OFS= -v "branch_color=$branch_color" '
            $1 == "#" {
                $1=$2=$3=""; branch = branch_color $0 "\033[0m"
                next
            }
            $1 == "U" || $2 == "U" ||
              ($1 ~ /^[AD]$/ && $1 == $2) { unmerged++; next } # last case is AA or DD
            $1 == "?"                     { untracked++; next }
            $1 ~ /^[CARMD]$/ && $2 != "U" { staged++ }
            $1 != "U" && $2 ~ /^[RADMC]$/ { unstaged++ }
            END {
                unmerged  = unmerged > 0  ? " \033[1;35m" unmerged  "\033[0mx" : ""
                staged    = staged > 0    ? " \033[1;32m" staged    "\033[0m+" : ""
                unstaged  = unstaged > 0  ? " \033[1;31m" unstaged  "\033[0m*" : ""
                untracked = untracked > 0 ? " \033[1;31m" untracked "\033[0m?" : ""
                printf "%s%s%s%s%s", branch, unmerged, staged, unstaged, untracked
            }
        '
    fi
}

main "$@"
