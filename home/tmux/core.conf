# vim: filetype=tmux
# Common platform-agnostic tmux configuration

# Reset to default bindings
unbind -a
source ~/.config/tmux/0-default.conf

source ~/.config/tmux/styles.conf

unbind C-b
set -g prefix 'M-\'    # right hand
bind 'M-\' send-prefix
set -g prefix2 M-`     # left hand lol
bind 'M-`' send-prefix

# set -g default-command "ENV=~/.config/sh/rc exec bash --noprofile --norc --posix"
set -g default-command "zsh"

# edit and reload tmux config while tmux is running
bind e split-window -h '\
    f=~/.config/tmux/core.conf && \
    printf "\033]2;%s\033\\" "$f" && \
    $EDITOR "$f" && \
    tmux source "$f"
'
bind r source ~/.config/tmux/core.conf

# quick escape for Neovim under Tmux. See the following:
# https://github.com/neovim/neovim/issues/2035, and
# https://github.com/neovim/neovim/wiki/FAQ#esc-in-tmux-or-gnu-screen-is-delayed
set -g escape-time 10

# idk
set -g repeat-time 1000 # for repeat key bindings, how long until the repeat is no longer valid

# more obvious splits
bind "\\" split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
# full window width or height splits
bind | split-window -fh -c "#{pane_current_path}"
bind _ split-window -fv -c "#{pane_current_path}"

# vi keys for copy mode + more bindings for variety and convenience
# copy mode things
set -g mode-keys vi
bind -T root         M-\[ copy-mode
bind -T root         M-\{ copy-mode \; send -X begin-selection \; send -X search-backward [‚ùØ@] # select up to our last command
bind -T root         M-\} copy-mode \; send -X begin-selection \; send -X search-forward [‚ùØ@] # searching forward
bind -T copy-mode-vi [    send -X search-backward [‚ùØ@] # so it's repeatable in copy-mode
bind -T copy-mode-vi ]    send -X search-forward [‚ùØ@] # so it's repeatable in copy-mode
bind -T copy-mode-vi v    send -X begin-selection
bind -T copy-mode-vi r    send -X rectangle-toggle
bind -T copy-mode-vi C-v  send -X begin-selection \; send -X rectangle-toggle
bind -T root         M-v  run-shell tmux-vim-copy-pane # it's like copy-mode-vi, but to the XTREME; see my comments in that file

# yank and paste
bind -T copy-mode-vi y     send -X copy-selection
bind -T copy-mode-vi Enter send -X copy-selection-and-cancel

# system specific; contains our paste root-table M-p binding
if 'test -n "$WSL_DISTRO_NAME"'   "source ~/.config/tmux/wsl.conf"
if "uname -v | grep -q Ubuntu"    "source ~/.config/tmux/linux.conf"
if "uname -v | grep -q Darwin"    "source ~/.config/tmux/macos.conf"

# For the Tmux command line
set -g status-keys emacs

# Vim ttyle pane selection
bind -r -T prefix h resize-pane -L
bind -r -T prefix j resize-pane -D
bind -r -T prefix k resize-pane -U
bind -r -T prefix l resize-pane -R

# Use Alt-vim keys without prefix key to switch panes
bind -T root M-h select-pane -L
bind -T root M-j select-pane -D
bind -T root M-k select-pane -U
bind -T root M-l select-pane -R
bind -T root M-i select-pane -l     # last pane
bind -T root M-o select-pane -t :.+ # cycle through panes
#
# we create a new new session so we can detach and reattach
bind -T root M-R run-shell "tmux popup -E 'tmux attach -t popup || tmux new -s popup'" # R for run!

# Easier resizing
bind -T root M-H resize-pane -L 10
bind -T root M-J resize-pane -D 5 # resize less in vertical directions because
bind -T root M-K resize-pane -U 5 # there is usually less vertical space
bind -T root M-L resize-pane -R 10

# smart pane switching with awareness of Vim splits
# see: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
bind -T root M-h if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind -T root M-j if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind -T root M-k if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind -T root M-l if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'
Tmux_version='$(tmux -V | grep -Eo "[0-9.]+")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -T root M-i if-shell \"$is_vim\" 'send-keys C-\\' 'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -T root M-i if-shell \"$is_vim\" 'send-keys C-\\\\' 'select-pane -l'"
bind -T copy-mode-vi M-h select-pane -L
bind -T copy-mode-vi M-j select-pane -D
bind -T copy-mode-vi M-k select-pane -U
bind -T copy-mode-vi M-l select-pane -R
bind -T copy-mode-vi M-i select-pane -l
bind -T copy-mode-vi M-o select-pane -t :.+

# Use Alt-arrow keys without prefix key to switch panes
bind -T root M-Left select-pane -L
bind -T root M-Right select-pane -R
bind -T root M-Up select-pane -U
bind -T root M-Down select-pane -D

# Use Alt-<number> to switch windows without prefix
# No 0 because our base-index below is 1.
# Maybe repurpose higher ones for something else,
# because we rarely use more than a few.
bind -T root M-1 select-window -t :=1
bind -T root M-2 select-window -t :=2
bind -T root M-3 select-window -t :=3
bind -T root M-4 select-window -t :=4
bind -T root M-5 select-window -t :=5
bind -T root M-6 select-window -t :=6
bind -T root M-7 select-window -t :=7
bind -T root M-8 select-window -t :=8
bind -T root M-9 select-window -t :=9
bind -T root M-q select-window -t :+1 # go to next, don't really need a previous
bind -T root M-w select-window -t :!  # go to last
bind -r "<" swap-window -d -t -1
bind -r ">" swap-window -d -t +1

# more hand friendly to 1 index
set -g base-index 1
set -g renumber-windows on

# renaming windows
set -g allow-rename on # allows \ek...\e\\ escape sequence for renaming windows
set -g automatic-rename on
set -g automatic-rename-format "#{?pane_in_mode,[tmux],#{pane_current_command}}#{?pane_dead,[dead],}"


# status left
#
# ideally could do #{w:#{E:status-left}} to get the width of what the
# status-left would actually be, but doesn't seem this option allows for math
# set -g status-left-length 50
# set -g status-left "\
# #[fg=black, bg=colour214]#{?client_prefix,#[bg=colour167],} ‚ùê #S #[fg=default,bg=default] \
#{sysstat_cpu} #{sysstat_mem} [#{sysstat_loadavg}] "
# set -g status-left "#[fg=black, bg=colour214]#{?client_prefix,#[bg=colour167],} ‚ùê #S #[fg=default,bg=default] "
# set -g @sysstat_mem_view_tmpl 'MEM:#[fg=#{mem.color}]#{mem.pused}#[default] #{mem.used}'


# status right
# set -g status-right-length 140
# set -g status-right "#[fg=cyan]Ôê∫  %a %b %d %H:%M"

# pane settings
set -g pane-base-index 1

# set-hook is quicker than what our sh/rc can do, so upon any new panes, we set
# the title to an empty string to avoid flickering from the default pane title
# of our machine hostname
set-hook -g after-split-window[0] "select-pane -T \"\""
set-hook -g after-new-window[0] "select-pane -T \"\""
set-hook -g after-new-session[0] "select-pane -T \"\""



# misc

set -g focus-events on # for vimpostor/vim-tpipeline


# the visual stuff is annoying but monitoring is handy
# if i forget about a process in another window
set -g monitor-activity on
set -g monitor-bell on
set -g monitor-silence 0
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off

set -g history-limit 10000
# allows selection of text with
set -g mouse off
bind m set-option -gF mouse "#{?mouse,off,on}" \; display-message -p "Mouse: #{?mouse,ON,OFF}"

# colors
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",*256col*:Tc"
set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
set-environment -g COLORTERM "truecolor"

# when running tmux display-panes
set -g display-panes-active-colour yellow

#####

# set-hook -g pane-focus-in 'run-shell "rich-presence-update pane-focus-in"'

# command aliases, e.g. tmux id

# returns an ID that can be used for -t (target-pane) arguments
set -g command-alias[1] id='display -p -F "#S.#I:#P"'

#####

# We don't need a session environment. We only use the global environment.
# Using the default doesn't interfere with anything, but it's cleaner to just
# get rid of it to avoid confusion between `tmux showenv` and `tmux showenv -g`.
# See the envupdate function in ~/.shrc.
set -g update-environment ""

bind T run 'zsh -c "arr=( off top ) && tmux setw pane-border-status \${arr[\$(( \${arr[(I)#{pane-border-status}]} % 2 + 1 ))]}"'
bind t command-prompt -p "(rename-pane)" -I "#T" "select-pane -T '%%'"


#####

# (keep this at the very bottom)
source ~/.config/tmux/plugins.conf

#
#set-hook -g after-new-window 'run -b "
#    tmux set -g window-status-format \"$(
#        width=\"#{e|/:#{e|-:#{window_width},#{e|+:#{w:#{E:status-right}},#{w:#{E:status-left}}}},#{e|+:2,#{session_windows}}}\"
#        printf \"%s\" \"##{p\$width:window_name}\"
#    )\"
#"'
#
## unfortunately no after-window-exit hook, but when we do close a window, the
## window changes, so at least we can hook into that... ü§∑
#set-hook -g session-window-changed 'run "
#    tmux set -g window-status-format \"$(
#        width=\"#{e|/:#{e|-:#{window_width},#{e|+:#{w:#{E:status-right}},#{w:#{E:status-left}}}},#{e|+:2,#{session_windows}}}\"
#        printf \"%s\" \"##{p\$width:window_name}\"
#    )\"
#"'
##{e|/:#{e|-:#{window_width},#{e|+:#{status-right-length},#{status-left-length}}},#{session_windows}} \"
