#!/bin/sh
#
# For macOS, but might work elsewhere
# Tries to auth against a GP VPN behind a PingFederate SSO endpoint
# Goal is to print out a prelogin cookie (?) to use with OpenConnect
#
# Disclaimer: This definitely does not work. I'm just committing something
# I hacked on almost a year ago just so when I might want to try again, I have
# something to go off of.

set -eu
gp=https://gp.company.com:443
cookies=/tmp/cookies.txt

domain=redacted
username=redacted
password=redacted

en0mac="$(ifconfig en0 ether | awk '$1 == "ether" {print $2}')"
osversion="Apple $(sw_vers -productName) $(sw_vers -productVersion)"
clientgpversion='5.1.4-45'

curl() {
        # Whereever clientos is used...
        # clientos is super important for whatever reason when paired with the
        # PAN GP user-agent above. Interestingly, if we remove the user-agent
        # and the clientos argument, we'll go through the auth flow with no
        # issue, until it's time for our prelogin_cookie will be empty! Why? Who knows!
        #
        # Similar to the prelogin... For whatever reason, 'clientos' is super
        # important. Without it, we don't get back a 'portal-userauthcookie'.
        # The other params are just for whatever.

        command curl -s -b "$cookies" -c "$cookies" "$@" \
                -H "User-Agent: PAN GlobalProtect/$clientgpversion ($osversion)" \
                -H 'Accept-Language: en-us' \
                -H 'Accept-Encoding: gzip, deflate, br' \
                -H 'Accept: */*' \
                -H 'Content-Type: application/x-www-form-urlencoded' \
                -H 'Cache-Control: no-cache' \
                -H 'Connection: keep-alive' \
                --compressed
}

showcookie() {
        name="$1"
        shift
        awk -v f="$name" 'f == $6 {print $7}' "$cookies"
}

cleanup() {
        if [ -z "$prelogin_cookie" ]; then
                echo >&2 "Prelogin cookie is empty. Something went wrong! :("

                if [ -n "$prelogin_response" ]; then
                        printf >&2 "Prelogin response was:\n---\n%s\n" "$prelogin_response"
                fi
        fi
}

log() {
        t="$(date +"%D %T")"
        printf >&2 "[%s] %s\n" "$t" "$*"
}

login() {
        prelogin_cookie=""
        trap cleanup EXIT
        echo "Starting login"

        rm -f "$cookies"

        prelogin="$gp/global-protect/prelogin.esp"

        prelogin_response="$(
                curl -i -XPOST "$prelogin" \
                        -d tmp=tmp \
                        -d kerberos-support=yes \
                        -d ipv6-support=yes \
                        -d clientos=Mac \
                        -d clientVer=4100 \
                        -d host-id="$en0mac" \
                        -d os-version="$osversion"
        )"

        log "Got response from GP prelogin ($prelogin)"

        saml_request="$(echo "$prelogin_response" | grep -Eo '<saml-request>[^<]+' | cut -d\> -f2 | base64 -d)"

        log "Parsed response for SAML request"

        idp_endpoint="$(echo "$saml_request" | grep -Eo 'action="[^"]+"' | cut -d\" -f2)"
        relay_state="$(echo "$saml_request" | grep -Eo '"RelayState" value="[^"]+"' | cut -d\" -f4)"
        authn_request="$(echo "$saml_request" | grep -Eo '"SAMLRequest" value="[^"]+"' | cut -d\" -f4)"

        log "Parsed SAML request for..."
        log "    Identity provider: $idp_endpoint"
        log "    RelayState: $relay_state"
        log "    Encoded authentication request as another SAMLRequest: <omitted for brevity>"

        idp_response="$(
                curl -i -XPOST "$idp_endpoint" \
                        --data-urlencode SAMLRequest="$authn_request" \
                        --data-urlencode RelayState="$relay_state"
        )"

        log "Got response from identity provider"

        sso1_base="$(echo "$idp_response" | grep -Eo '<base href="[^"]+"/>' | cut -d\" -f2 | sed 's!/$!!')"
        sso1_endpoint="$(echo "$idp_response" | grep -Eo 'action="[^"]+"' | cut -d\" -f2 | sed 's!^/!!')"
        sso1="$sso1_base/$sso1_endpoint"

        log "Parsed response for first SSO authentication endpoint ($sso1)"
        log "Using $username..."

        sso_response_1="$(
                curl -iL -XPOST "$sso1" \
                        --data-urlencode pf.username="$username" \
                        --data-urlencode pf.pass="$password" \
                        -d pf.adapterId=FormOutside \
                        -d pf.ok=clicked \
                        -d pf.cancel="" \
                        -d pf.passwordreset=""
        )"

        log "Got response from first authentication"

        sso2_base="$(echo "$sso_response_1" | grep -Eo '<base href="[^"]+"/>' | cut -d\" -f2 | sed 's!/$!!')"
        sso2_endpoint="$(echo "$sso_response_1" | grep -Eo 'action="[^"]+"' | cut -d\" -f2 | sed 's!^/!!')"
        sso2="$sso2_base/$sso2_endpoint"

        log "Parsed response for second SSO authentication endpoint ($sso2)" # likely the same

        code="$(2fa vpn)"
        log "Using $code..."

        sso_response_2="$(
                curl -i -XPOST "$sso1" \
                        -d pf.pass="$code" \
                        -d pf.adapterId=UFA \
                        -d pf.ok="" \
                        -d pf.cancel=""
        )"

        log "Got response from second authentication"

        acs_endpoint="$(echo "$sso_response_2" | grep -Eo 'action="[^"]+"' | cut -d\" -f2)"
        relay_state_2="$(echo "$sso_response_2" | grep -Eo '"RelayState" value="[^"]+"' | cut -d\" -f4)"
        saml_response="$(echo "$sso_response_2" | grep -Eo '"SAMLResponse" value="[^"]+"' | cut -d\" -f4)"

        log "Parsed response request for..."
        log "    ACS endpont: $acs_endpoint"
        log "    RelayState: $relay_state_2"
        log "    SAMLResponse: <omitted for brevity>"

        id="$(echo "$saml_response" | base64 -d | grep -Eo '<saml:NameID.+?>[^<]+' | cut -d\> -f2)"
        log "Logged in as $id"

        if [ "$relay_state" != "$relay_state_2" ]; then return; fi
        log "Relay states match!"

        acs_response="$(
                curl -i -XPOST "$acs_endpoint" \
                        --data-urlencode RelayState="$relay_state" \
                        --data-urlencode SAMLResponse="$saml_response"
        )"

        printf "%s" "$saml_response" | pbcopy
        log "Got response from the ACS"

        # saml username might have a \, so use printf
        saml_username="$(printf "%s" "$acs_response" | awk '/^saml-username:/ {print $2}')"
        prelogin_cookie="$(printf "%s" "$acs_response" | awk '/^prelogin-cookie:/ {print $2}')"

        log "SAML username is $saml_username"
        log "Prelogin cookie is $prelogin_cookie"

        getconfig="$gp/global-protect/getconfig.esp"
        # --data-urlencode user="$saml_username" \
        # --data-urlencode prelogin-cookie="$prelogin_cookie" \
        # -d portal-userauthcookie="cEIeHNV7KmV5xvzU+T35v3NGE9s/HfiRSWs5ZMurvwUZ67cNnzArnTQh6tgY1TmhEC9mhT1csnPDR4sQxTwJaFn8ZlJZHcZmxpRMAliW4IIPPog2i2fxyajv69IpaBautCEWlq+fM9Y1yZehcey4tUTi21kkN3kVMlD7J0KS2baaiATLRf01H1AraEF3idJZedOyhfWC3qWvXKUW6RH81cAWNMPV+yGcDYddM6R2vbP3TG1ScDQlH+zztO7llq5XrnD1Ap4cM9nO3q5k6XpGfK+QIpFiV4fjtq2gN4eehThZapbbSgQbudO3AZwfbmvMzSq1P1DrgvV4OS+7/XUQVA==" \
        # -d portal-prelogonuserauthcookie="aGAiL0CL55NIPFa9Rh7Ob1oZpPCLsyIPjcIePMME8RP1k9TRmaWab2aqs/KbrTIAe6rQMMAhH2pOr3UZEJQUzaDEx6vJJxf89CiYyoDrJJLQnYfcvSQovWy/mJVvsOFxm3RA6Af6uMBpeyF70bX1a2sliuiylcyjzxrQW21Cz/lsalQ153qL0WapR7ny1fX3grNn6516SRwkOClUghZkCzl1D5VvYt1yEJJ5UBadw42Ec+THl5KHDo2/M9IofK4kpUfk2YjhMIc4PCVkCjh4NEIwNh9DzxjI22D9O6sGUmtavfQFH0NUzQuuHY/hDM8j6cEfI1WmoCVtxS/RBzdVmw==" \
        # -d ok=Login \
        # -d clientos=Mac \
        # -d clientVer=4100 \
        # -d host-id="$en0mac" \
        # -d os-version="Apple Mac OS X 10.15.7"

        # the config digest isn't necessary to get a portal-userauthcookie, but
        # if it's not present, the portal-userauthcookie won't work against the
        # /ssl-vpn/login.esp endpoint.
        #
        # TODO I don't think the config digest can change, but maybe do this
        # request twice because if the digest doesn't match, it's available in
        # the response anyways.
        getconfig_response="$(
                curl -iL -XPOST "$getconfig" \
                        -d "user=$domain\\$username" \
                        -d passwd="" \
                        -d inputStr="" \
                        -d ok="Login" \
                        -d clientVer="4100" \
                        -d portal-userauthcookie="FDgHzQovczfBaBTjMjZmU8IHYzizHadZ6Bu+Zwd8k+qdPbvWvGggasejRMcpCmU/U9U9YYquSfr5S6mBvtPbzSMCsEMfYK97Oti19L6vP7i/oUhvkYWexOLzCFB6SuarGGHE6Jgke6h4lyxhDDRItD4oS/phdG2lz+zTQQ4aVBJr3IwvlMrEFyzkC+mx8qQ4lEoDEO/Bu0RMpZOlYbQIdOZZ0q4JfpefRXi9ShICyQo7rNLXqwoqZbtMZkMrKyY9EXopoJxHAPIdNJ/ek00P4lO0eKy9g1T01T6el76+RFnR5YkEU/vYzjg+RmfEn22Tf19Jhk/7YuWWrMpfFWEIvQ==" \
                        -d portal-prelogonuserauthcookie="WyyD6rA0DDRTdZFRvp6YajPaSFrl6dj1guHoFj+y0O/rZ28Y2JITfIPqTG/2nheKssc90cw2qY0Ct8qXH1ptZtC4IxHQHlzKK4+tK+yFFnAXV/F2y/ZjrVEh9mM4LAUNmR/SqIK/3MSYe+1dusJgg1YM2E7ugfg0Wh1wSEuyGCaISC5S7/t/wvzcknEgECdqncypl3kSXqkI/q6RDgG5GXqtixF4iXAg0sWfzzuYLaRSHnB2qodrL3tC3NW54Yn1Jdz/MG6DAVCwWUrZWz9CdUmEF3vh27ND52QvgBoNUKWr8vx6A1QFBY/kI6ZyGITmATcmsO8ggZ3bCM6xXGtEhA==" \
                        -d clientos="Mac" \
                        -d clientgpversion="5.1.4-45" \
                        -d computer="smart-toaster" \
                        -d os-version="Apple Mac OS X 10.15.7" \
                        -d host-id="a4:83:e7:d7:79:b7" \
                        -d prelogin-cookie="x8AB1RsiuBeNsPhD4Of4dzbOkcmb3y8XVLbSeFFiwp0hiA/xR4Z19btJa8eYw60o" \
                        -d ipv6-support="yes" \
                        -d serialno="C17ZL1ZKMD6M" \
                        -d csc-digest="" \
                        -d config-digest="df1306d9284947830a4505aca08257c0" \
                        -d csc-support="yes"
        )"

        log "Got response from GP $getconfig"
        echo "$getconfig_response"

        portal_userauth_cookie="$(echo "$getconfig_response" | grep -Eo '<portal-userauthcookie>[^<]+' | cut -d\> -f2)"

        log "Portal user authentication cookie is $portal_userauth_cookie"
        echo "$portal_userauth_cookie" | wc -l
        #
        prelogin2="$gp/ssl-vpn/prelogin.esp"
        prelogin2_response="$(
                curl -i -XPOST "$prelogin2" \
                        --data-urlencode prelogin-cookie="$prelogin_cookie" \
                        -d tmp=tmp \
                        -d kerberos-support=yes \
                        -d ipv6-support=yes \
                        -d clientos=Mac \
                        -d clientVer=4100 \
                        -d "host-id=$en0mac" \
                        -d "os-version=Apple Mac OS X 10.15.7"
        )"
        #echo "$prelogin2_response"

        # these are the minimum number of required params (even host-id yes)
        curl -XPOST "$gp/ssl-vpn/login.esp" \
                --data-urlencode "user=$domain\\$username" \
                --data-urlencode "portal-userauthcookie=$portal_userauth_cookie" \
                -d jnlpReady=jnlpReady \
                -d ok=Login \
                -d direct=yes \
                -d clientos=Mac \
                -d clientVer=4100 \
                -d host-id="$en0mac"

        # prot=https
        # os-version=mac-intel
        # server=gp.company.com
        # computer=smart-toaster
        #        -d prelogin-cookie="" \
        #        -d client-ip="127.0.0.1" \
        #        -d client-ipv6="" \
        #        -d internal="no" \
        #        -d serialno="C17ZL1ZKMD6M" \
        #        -d connect-method="on-demand" \
        #        -d selection-type="auto"
        #        ipv6-support=yes
}

main() {
        login
}

set -eu
main
