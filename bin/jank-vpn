#!/bin/sh
# shellcheck disable=SC2086
#
# This sets up a janky VPN via sshuttle (and a SOCKS proxy).
#
# - sshuttle for forwarding any local outgoing requests to our remote subnets
# - dns-proxy to setup a SOCKS for use in the browser; also edits our
#   /etc/resolv.conf to proxy any DNS requests through this SOCKS proxy
#
# Usage:
#
#     $ export JANK_VPN_DNS_SERVERS='10.1.2.3 10.5.6.7'
#     $ export JANK_VPN_SUBNETS='10.100.100.10/16 10.100.100.20/24'
#     $ jank-vpn <remote-host> [local-port:2001]
#

[ "$(id -u)" != 0 ] && exec sudo env \
        "PATH=$PATH" \
        "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" \
        "JANK_VPN_RANGES=$JANK_VPN_RANGES" \
        "JANK_VPN_DNS_SERVERS=$JANK_VPN_DNS_SERVERS" \
        "$0" "$@"

user="${SUDO_USER-$USER}"
HOME="/home/$user"

alias ssh='ssh -F "$HOME/.config/ssh/config"'

start_sshuttle() {
        hostname="$remotehost"

        ip="$(sudo -u "$user" ssh -G "$hostname" | awk '/^hostname/ {print $2}')"

        if [ -z "$ip" ]; then echo >&2 "Couldn't find an IP for $hostname" exit 1; fi

        # sshuttle has to run under our user so it can read from our ssh config
        # and properly setup the iptables rules. using --ssh-cmd didn't quite
        # work... ðŸ¤·

        sudo -u "$user" env "PATH=$PATH" "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" sshuttle \
                -v \
                --remote "$hostname" \
                --exclude "$ip" \
                $ranges
}

start_socksproxy() {
        sudo -u "$user" env "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" ssh -N -D "0.0.0.0:$localport" "$remotehost" \
                -o PermitLocalCommand=yes \
                -o LocalCommand="
                    echo 'SOCKS proxy on 0.0.0.0:$localport via $remotehost'
                "
}

# maybe i don't need this...
# think i could just --dns with sshuttle
# not sure why I bothered with a dns proxy over socks
#
start_dnsproxy() {
        rm -rf /tmp/dns-socks-proxy
        mkdir -p /tmp/dns-socks-proxy
        cd /tmp/dns-socks-proxy || return
        genconf

        if ! command -v dns-proxy >/dev/null; then
                echo >&2 "Expected to find dns-proxy binary"
                exit 1
        fi

        # it's going to overwrite our /etc/resolv.conf so back it up
        cp /etc/resolv.conf /etc/resolv.conf.bak
        chattr -i /etc/resolv.conf

        start_socksproxy &
        pids="$! $pids"
        env "PATH=$PATH" dns-proxy dnsproxy.conf # goes to background immediately
}

genconf() {
        # the resolvers to proxy through our SOCKS proxy
        echo "$dnsservers" | tr ' ' '\n' >resolv.conf

        tee dnsproxy.conf >/dev/null <<EOF
# socks proxy
socks_addr = 127.0.0.1
socks_port = $localport

# local listener
listen_addr = 127.0.0.1
listen_port = 53

# executes as sudo, but we drop to everybody
set_user  = nobody
set_group = nogroup

# file to read as resolv.conf
resolv_conf         = resolv.conf
rewrite_resolv_conf = true

# file to log to, should be /dev/null unless debugging
log_file = /dev/stdout
EOF
}

cleanup_dnsproxy() {
        echo undoing dnsproxy
        sudo chattr -i /etc/resolv.conf
        sudo mv /etc/resolv.conf.bak /etc/resolv.conf
        sudo pkill dns-proxy
}

main() {
        remotehost="${1?}"
        localport="${2-2001}"
        ranges="$JANK_VPN_RANGES"
        dnsservers="$JANK_VPN_DNS_SERVERS"
        start_sshuttle &
        start_dnsproxy &
}

cleanup() {
        cleanup_dnsproxy
        echo

        pgid="$(ps -o pgid= $$ | tr -d ' ')"
        sudo kill -- -"$pgid"
}

trap exit INT TERM
trap cleanup EXIT
main "$@"
wait
