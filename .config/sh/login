#!/bin/sh
# shellcheck disable=SC1090,SC1091
#
# .shlogin contains commands to bootstrap our login shell. How do we invoke this
# file if we don't use the traditional .profile naming convention for login
# shells?
#
# While not actually documented by the POSIX standard, any POSIX-compatible
# shell (e.g. ash, dash, ksh, bash, zsh, etc.) will read the the ENV environment
# variable to initialize the shell's environment. Typically, one of these shells
# will be symlinked to just `sh`, so we can run `ENV=~/.shlogin sh` to have our
# shell initialize itself with the commands from this file.
#
# Note the distinction between login and non-login shells is meaningless apart
# from the files they read at startup. By explicitly providing the
# initialization file for our shell, we know exactly what file our shell is
# sourcing and don't have to muck around knowing the source order of
# /etc/profile, .profile, or .(bash_|z)profile when debugging our "login" shell.
# I also have trust issues, and this way I know exactly what happens to my
# shell.
#
# Flow of execution is as follows:
# 1. Pick a terminal (e.g. Windows Terminal, Alacritty, st, etc.)
# 2. Configure the terminal to start with a default command of something like:
#    `ENV=~/.shlogin sh`
# 3. .shlogin will be sourced:
#   - We'll check for the SSH agent's auth socket.
#   - We'll export env vars that we don't expect to change between logins.
#   - We'll do some other junk that makes sense to do only once, i.e. at login.
#   - We'll exec into a tmux session (and do nothing if we're already in one).
#     This should be done last to persist the environment to child shells.
# 4. tmux's default-command takes over and our "non-login" shell is invoked for
#    whenever we create new tmux panes/windows. We use .shrc for that.
#
# Since this file is idempotent, we can technically use it for non-login shells
# too, but... that would feel odd (to me). For example, we don't need to check
# every time we open up a new tmux pane if we're inside of a tmux session,
# because of course we are! However, it's really up to the user. If one feels
# like a command should only be run once (like at "login"), it should be done
# here. Otherwise, we'll put it in .shrc.
#
# Essentially, we're optimizing for milliseconds each time we open up a new
# terminal pane by carefully distinguishing between commands we want to only
# once, as opposed to every time. Imagine what I can do with all that time
# saved!

# 1. If there's more than one agent running, terminate them all.
# 2. Read ~/.cache/ssh/vars for the connection info.
# 3. If `ssh-add -l` exits 2, we've failed to connect.
#    Either the socket has been cleaned up, the process was killed, or the agent
#    is just not running. In any case, kill the remaining agent process if any,
#    and start up a new agent, writing its connection info to
#    ~/.cache/ssh/vars.
# 4. Otherwise, we're good and we add our keys.
ensure_ssh_agent() {
        mkdir -p ~/.cache/ssh
        cd ~/.cache/ssh || return

        ssh_agent_pids="$(ps -e | awk '$NF == "ssh-agent" {print $1}')"
        if [ "$(echo "$ssh_agent_pids" | wc -l)" -gt 1 ]; then
                echo "More than one SSH agent is running. Terminating them all."
                echo "$ssh_agent_pids" | xargs kill -TERM
        fi

        echo "Setting up SSH agent..."
        if [ -r ./vars ]; then
                echo "Previous SSH agent vars exist, using them..."
                . ./vars
        fi

        # see http://man7.org/linux/man-pages/man1/ssh-add.1.html#EXIT_STATUS
        ssh-add -l >/dev/null
        ssh_status="$?"

        if [ "$ssh_status" -eq 2 ]; then
                echo "Was unable to contact the SSH agent, restarting..."
                kill -TERM "$ssh_agent_pids" 2>/dev/null
                echo "Starting ssh-agent"
                (
                        umask 0066
                        ssh-agent -s >vars
                )
                . ./vars
        else
                echo "Looks like it was already running!"
        fi

        cd - || return

        ssh-add ~/.config/ssh/keys/*.pem
}

ensure_tmux() {
        echo "Setting up tmux..."

        if [ -n "$TMUX" ]; then
                echo "We're already inside of a tmux session"

                # If this login init script was ran again, make sure our Tmux session
                # has got the latest SSH agent vars for any new panes
                tmux set-environment -gt local SSH_AUTH_SOCK "$SSH_AUTH_SOCK"
                tmux set-environment -gt local SSH_AGENT_PID "$SSH_AGENT_PID"

                return
        fi

        if tmux ls -F '#{session_name}' | grep -qx local; then
                echo "Local tmux session already exists"
                echo "If you'd really like to, we'll attach into it in 3 seconds"
                echo "Otherwise, send ^C"
                sleep 3
                exec tmux -2 attach -t local
        else
                echo "Starting local tmux session"
                exec tmux -2 -f ~/.config/tmux/core.conf new -s local
        fi
}

ensure_ssh() {
        echo "We're connected over SSH; skipping tmux"
        echo "It's likely you've already got a local tmux session going"

        # same as the default-command within our tmux config
        # TODO maybe figure out a neat way to set the tmux setting
        # from this script to not duplicate this command
        ENV=~/.config/sh/rc exec bash --noprofile --norc --posix
}

main() {
        umask 0022 # might not always be set, like in WSL distros
        . ~/.config/sh/env

        if [ -r ~/.config/sh/env.work ]; then
                . ~/.config/sh/env.work
        fi

        ensure_ssh_agent

        if [ -n "$SSH_TTY" ]; then
                ensure_ssh
        else
                ensure_tmux
        fi
}

main
