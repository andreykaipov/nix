#!/bin/sh

# https://github.com/containers/podman/issues/6800
refresh_rootless_podman_after_reboot() {
        libpod_tmp="$XDG_RUNTIME_DIR/libpod/tmp"
        if [[ /proc/1 -nt "$libpod_tmp" ]]; then
                rm -rf "$libpod_tmp"
        fi
}

#refresh_rootless_podman_after_reboot

gowatchlint() {
        reflex -r '\.go' -- sh -c "golangci-lint run ./... --out-format tab; echo"
}

gowatchtest() {
        reflex -r '\.go' -- sh -c "go test -coverprofile cover.out ./... -coverpkg ./... $*; echo"
}

yamlappend() {
        f="$1"
        shift
        arraykey="$1"
        shift
        entry="$1"
        shift
        yq w -i "$f" "$arraykey"[+] "$entry"
}

serve() {
        http-server "${1:-.}" --port "${2:-9000}" --cors
}

# runs a debug container in k8s
kdebug() {
        img="${1:-alpine}"
        namespace="${2:-default}"
        kubectl -n "$namespace" run -i --tty --rm debug --image="$img" --restart=Never -- sh
}

# Creates and navigates into a new empty temporary directory
tmp() {
        cd "$(mktemp -d)" || return
}

# takes \n delimited output and creates a path-formatted string.
# strips leading whitespace and skips empty lines and lines starting with #.
# e.g. `echo $'a\n   b\n c\n' | pathify` outputs `a:b:c`
# optionally takes an argument to specify the joining delimiter.
pathify() {
        grep -Ev '(^\s*#)|^$' | sed -E 's/^ +//' | tr '\n' "${1:-:}" | sed 's/.$//'
}

get() {
        if command -v wget >/dev/null; then
                wget -qO "$@"
        elif command -v curl >/dev/null; then
                curl -sLo "$@"
        else
                echo "How does this system not have neither wget nor curl?"
                exit 1
        fi
}

# pyenv shim, from `pyenv init -` to make it work
pyenv() {
        command="${1:-}"
        if [ "$#" -gt 0 ]; then
                shift
        fi

        case "$command" in
                activate | deactivate | rehash | shell)
                        eval "$(pyenv "sh-$command" "$@")"
                        ;;
                *)
                        command pyenv "$command" "$@"
                        ;;
        esac
}

tfvars2json() {
        f="$1"
        neat="$(
                awk <"$f" '
            BEGIN { print "{" }
            $0    { if ( match($0, /[^,={]$/) ) { print $0"," } else { print $0 } }
            END   { print "}" }
        ' | tr -d '\n'
        )"
        t="$(mktemp -d)"
        cd "$t" || return
        printf "jsonencode(%s)" "$neat" | terraform console | jq .
        cd - >/dev/null || return
        rm -rf "$t"
}

gsremoveemptytfstates() {
        gsutil ls -lh gs://d-ce-terraform/** | awk '$1 ~ /^15[67]$/ {print $NF}' | xargs gsutil -m rm
}

# easily browse s3 buckets
vims3() {
        tmpfile=$(mktemp)
        bucket=$(aws "$@" s3 ls | awk '{ print $3 }' | fzf)
        [ -z "$bucket" ] && exit 0
        selected=$(aws "$@" s3 ls --recursive "s3://$bucket/" | awk '{ print $4 }' | fzf)
        [ -z "$selected" ] && exit 0
        s3key="s3://$bucket/$selected"
        aws "$@" s3 cp "$s3key" "$tmpfile"
        rc=$?
        if [ $rc != 0 ]; then
                echo >&2 "Bucket or file does not exist"
                exit 1
        else
                VIMS3_HASH="$(openssl dgst -sha256 "$tmpfile")"
                export VIMS3_HASH
                vim "$tmpfile"
                if [ "$(openssl dgst -sha256 "$tmpfile")" != "$VIMS3_HASH" ]; then
                        aws "$@" s3 cp "$tmpfile" "$s3key"
                fi
        fi
        rm -f "$tmpfile"
        unset VIMS3_HASH
}

# opens up an incognito window from our aws session token
aws_login() {
        if [ -z "${AWS_SESSION_TOKEN}" ]; then
                echo "no AWS session token found"
        fi

        jq -cn --arg session_id "${AWS_ACCESS_KEY_ID}" \
                --arg session_key "${AWS_SECRET_ACCESS_KEY}" \
                --arg session_token "${AWS_SESSION_TOKEN}" \
                '{"sessionId": $session_id, "sessionKey": $session_key, "sessionToken": $session_token}' |
                curl -s -G \
                        --data "Action=getSigninToken" \
                        --data "SessionDuration=43200" \
                        --data-urlencode "Session@-" https://signin.aws.amazon.com/federation |
                jq -r '"https://signin.aws.amazon.com/federation?Action=login&Destination=https://console.aws.amazon.com/&SigninToken=\(.SigninToken)"' |
                xargs open -na "Google Chrome" --args --incognito
}

todo() {
        touch ~/.todo
        case "$1" in
                "" | l | list)
                        if [ -s ~/.todo ]; then
                                cat ~/.todo
                        else
                                echo "no todos"
                        fi
                        ;;
                p | progress | w | work)
                        shift
                        index="$1"
                        shift
                        awk -v "i=$index" '$2==i"." {$1="░"} 1' ~/.todo >~/.todo.tmp
                        mv ~/.todo.tmp ~/.todo
                        ;;
                d | "done")
                        shift
                        index="$1"
                        shift
                        awk -v "i=$index" '$2==i"." {$1="✔"} 1' ~/.todo >~/.todo.tmp
                        mv ~/.todo.tmp ~/.todo
                        ;;
                rm)
                        shift
                        index="$1"
                        shift
                        awk -v "i=$index" '$2!=i"."' ~/.todo >~/.todo.tmp
                        mv ~/.todo.tmp ~/.todo
                        ;;
                *)
                        last="$(tail -n1 ~/.todo | grep -oE '[0-9]+' | head -n1)"
                        succ="$((last + 1))"
                        echo "⚬ $succ. $*" >>~/.todo
                        ;;
        esac
}

reset_gp_vpn() {
        echo "Stopping GlobalProtect..."
        launchctl unload /Library/LaunchAgents/com.paloaltonetworks.gp.pangpa.plist
        launchctl unload /Library/LaunchAgents/com.paloaltonetworks.gp.pangps.plist
        echo "Starting GlobalProtect..."
        launchctl load /Library/LaunchAgents/com.paloaltonetworks.gp.pangpa.plist
        launchctl load /Library/LaunchAgents/com.paloaltonetworks.gp.pangps.plist
        echo "Done!"
}

weather() {
        # change Paris to your default location
        location="${1:-}"
        if [ "$(tput cols)" -lt 125 ]; then
                params='n'
        fi
        curl -s "wttr.in/$location?$params" | head -n-2
}

# color text in a terminal, e.g.:
# usage: color [fg|bg] hex [text]
# defaults to fg (foreground) and reading from stdin if text is empty or -
#
# examples:
# > echo hi hi | color f00
# > color f00 'hi hi'
# > echo hi hi | color bg d0d -
# > color bg f00 'hi hi'
color() {
        if [ "$#" -eq 3 ]; then
                style="$1"
                shift
                color="$1"
                shift
                text="$1"
                shift
        elif [ "$#" -eq 2 ]; then
                style='fg'
                color="$1"
                shift
                text="$1"
                shift
        elif [ "$#" -eq 1 ]; then
                style='fg'
                color="$1"
                shift
                text='-'
        else
                echo >&2 "todo usage"
                return
        fi

        if [ "$text" = "-" ]; then
                text="$(cat -)"
        fi

        if [ "$style" = 'fg' ]; then
                style='38;2'
        elif [ "$style" = 'bg' ]; then
                style='48;2'
        else
                echo >&2 "invalid style, must be either fg or bg"
                return 1
        fi

        rgb="$(hex2rgb "$color")"

        printf '\e[%s;%sm%s\e[0m' "$style" "$rgb" "$text"
}

hex2rgb() {
        color="$1"
        shift

        if [ -z "$color" ]; then
                echo >&2 "no color given"
                return 1
        fi

        if [ -n "$(printf '%s' "$color" | tr -d '0-9a-fA-F')" ]; then
                echo >&2 "invalid hex digit in $color"
                return 1
        fi

        length="$(printf '%s' "$color" | wc -c)"
        if [ "$length" -eq 3 ]; then
                r="$(echo "$color" | cut -c1)"
                r="$r$r"
                g="$(echo "$color" | cut -c2)"
                g="$g$g"
                b="$(echo "$color" | cut -c3)"
                b="$b$b"
        elif [ "$length" -eq 6 ]; then
                r="$(echo "$color" | cut -c1-2)"
                g="$(echo "$color" | cut -c3-4)"
                b="$(echo "$color" | cut -c5-6)"
        else
                echo >&2 "hex color $color must have either 3 or 6 digits"
                return 1
        fi

        printf '%d;%d;%d\n' "0x$r" "0x$g" "0x$b"
}

up() {
        cdstr=''
        i=0
        while [ $i -lt "${1-1}" ]; do
                cdstr="../$cdstr"
                i=$((i + 1))
        done
        cd "$cdstr" || return
}
