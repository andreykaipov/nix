#!/bin/bash
#
# Implement precommands and postcommands for Bash via trapping DEBUGs and via
# its PROMPT_COMMAND. The following was inspired by the following post:
# https://jichu4n.com/posts/debug-trap-and-prompt_command-in-bash.
#
# TODO: consider precmds with PS0 instead of trap .. DEBUG
#
# Usage:
#
# - Source this file (. ~/.shooks).
# - Implement precmd and postcmd functions in your rc file.
# - $__ret_last_cmd is available for use from both functions, containing the
#   exit code of the "last ran" command or function. For context on what "last
#   ran" means between the precmd and postcmd hooks, see the following snippet:
#
#   ❯ sh -c 'echo hi; exit 0'
#   in precmd: return of last command was 0
#   hi
#   in postcmd: return of last command was 0
#   ❯ sh -c 'echo hey; exit 1'
#   in precmd: return of last command was 0
#   hey
#   in postcmd: return of last command was 1
#   ❯ sh -c 'echo bye; exit 2'
#   in precmd: return of last command was 1
#   bye
#   in postcmd: return of last command was 2
#
# The following rc file was used to generate the above snippet:
#
#   # in ~/.bashrc:
#   . ~/.shooks
#   PS1='❯ '
#   precmd() { echo "in precmd: return of last command was $__ret_last_cmd"; }
#   postcmd() { echo "in precmd: return of last command was $__ret_last_cmd"; }
#
# Implementation:
#
# __precmd is implemented via Bash's DEBUG trap, with appropriate flags to
# prevent it from getting executed more than once in a pipeline or in
# a composite command.
#
# __postcmd is implemented via Bash's PROMPT_COMMAND (which actually executes
# **before** the prompt is rendered). However, by adding appropriate conditional
# checks on a flag only set at source-time for the initial prompt, and never
# setting it again, we can make PROMPT_COMMAND behave as a post-command hook. In
# addition, we unset the flags for the precmd hook so it can run again.
#
# Initialize flags. The conditional around __new_pts is necessary if we ever
# re-source this file or a parent rc file as we only want to set it for
# completely new terminals (hence the name __new_pts). So, we use __precmd_done
# as our condition since it'll be empty for new terminals, but as soon as we
# execute e.g. `. ~/.shooks`, __precmd kicks in and sets __precmd_done when it's
# done, the check to set __new_pts will run, it won't pass, and then __postcmd
# will unset __precmd_done again. Crazy, yes, just for a special case. :-)

if [ -z "$__precmd_done" ]; then
        __new_pts=1
fi

unset \
        __precmd_start \
        __precmd_done \
        __postcmd_start \
        __postcmd_done \
        __ret_last_cmd

__precmd_start=1

export \
        __precmd_start \
        __precmd_done \
        __postcmd_start \
        __postcmd_done \
        __ret_last_cmd

__precmd() {
        unset __postcmd_start __postcmd_done

        if [ -n "$__precmd_start" ]; then
                return
        fi

        __precmd_start=1
        [ -n "$DEBUG_SHOOKS" ] && {
                printf "\033[1;36m%s\033[0m\n" "START precmd"
                set -x
        }
        precmd
        { [ -n "$DEBUG_SHOOKS" ] && set +x; } 2>/dev/null
        [ -n "$DEBUG_SHOOKS" ] && { printf "\033[1;36m%s\033[0m\n" "DONE  precmd"; }
        __precmd_done=1
}

__postcmd() {
        __ret_last_cmd="$?"

        unset __precmd_start __precmd_done

        if [ -n "$__new_pts" ]; then
                unset __new_pts
                return
        fi

        __postcmd_start=1
        [ -n "$DEBUG_SHOOKS" ] && {
                printf "\033[1;36m%s\033[0m\n" "START postcmd"
                set -x
        }
        postcmd
        { [ -n "$DEBUG_SHOOKS" ] && set +x; } 2>/dev/null
        [ -n "$DEBUG_SHOOKS" ] && { printf "\033[1;36m%s\033[0m\n" "DONE  postcmd"; }
        __postcmd_done=1
}

trap __precmd DEBUG
PROMPT_COMMAND=__postcmd
